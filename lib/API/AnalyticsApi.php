<?php
/**
 * AnalyticsApi
 * PHP version 5
 *
 * @category Class
 * @package  GuestNetworks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Guest Networks API
 *
 * This is the public API for the [Guest Networks platform](https://www.mywifinetworks.com).  All requests must include an App Secret Key for authentication. To get your App Secret Key: 1. Log in to your MyWiFi Control Panel 1. Navigate to Branding section 1. Note your API key, located in the App Secret Key field   <br/> # Available SDKs [PHP API Client](https://github.com/MyWiFiNetworks/PublicAPI-PHP)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GuestNetworks\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuestNetworks\ApiException;
use GuestNetworks\Configuration;
use GuestNetworks\HeaderSelector;
use GuestNetworks\ObjectSerializer;

/**
 * AnalyticsApi Class Doc Comment
 *
 * @category Class
 * @package  GuestNetworks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation averageBandwidthUsage
     *
     * Retrieve average bandwidth used for a Location in bytes
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function averageBandwidthUsage($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        $this->averageBandwidthUsageWithHttpInfo($start, $end, $location_id, $campaign_id, $period);
    }

    /**
     * Operation averageBandwidthUsageWithHttpInfo
     *
     * Retrieve average bandwidth used for a Location in bytes
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function averageBandwidthUsageWithHttpInfo($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        $returnType = '';
        $request = $this->averageBandwidthUsageRequest($start, $end, $location_id, $campaign_id, $period);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation averageBandwidthUsageAsync
     *
     * Retrieve average bandwidth used for a Location in bytes
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function averageBandwidthUsageAsync($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        return $this->averageBandwidthUsageAsyncWithHttpInfo($start, $end, $location_id, $campaign_id, $period)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation averageBandwidthUsageAsyncWithHttpInfo
     *
     * Retrieve average bandwidth used for a Location in bytes
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function averageBandwidthUsageAsyncWithHttpInfo($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        $returnType = '';
        $request = $this->averageBandwidthUsageRequest($start, $end, $location_id, $campaign_id, $period);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'averageBandwidthUsage'
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function averageBandwidthUsageRequest($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling averageBandwidthUsage'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling averageBandwidthUsage'
            );
        }

        $resourcePath = '/average-bandwidth-used';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($location_id)) {
            $location_id = ObjectSerializer::serializeCollection($location_id, 'multi', true);
        }
        if ($location_id !== null) {
            $queryParams['location_id'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if (is_array($campaign_id)) {
            $campaign_id = ObjectSerializer::serializeCollection($campaign_id, 'multi', true);
        }
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = ObjectSerializer::toQueryValue($period);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation averageSessionTime
     *
     * Retrieve average visit duration for a Location in seconds
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function averageSessionTime($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        $this->averageSessionTimeWithHttpInfo($start, $end, $location_id, $campaign_id, $period);
    }

    /**
     * Operation averageSessionTimeWithHttpInfo
     *
     * Retrieve average visit duration for a Location in seconds
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function averageSessionTimeWithHttpInfo($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        $returnType = '';
        $request = $this->averageSessionTimeRequest($start, $end, $location_id, $campaign_id, $period);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation averageSessionTimeAsync
     *
     * Retrieve average visit duration for a Location in seconds
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function averageSessionTimeAsync($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        return $this->averageSessionTimeAsyncWithHttpInfo($start, $end, $location_id, $campaign_id, $period)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation averageSessionTimeAsyncWithHttpInfo
     *
     * Retrieve average visit duration for a Location in seconds
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function averageSessionTimeAsyncWithHttpInfo($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        $returnType = '';
        $request = $this->averageSessionTimeRequest($start, $end, $location_id, $campaign_id, $period);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'averageSessionTime'
     *
     * @param  \DateTime $start The start date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  \DateTime $end The end date format should be YYYY-MM-DD. Only required if \&quot;period\&quot; is \&quot;custom\&quot;. (required)
     * @param  int[] $location_id A comma-separated list of location IDs. (optional)
     * @param  int[] $campaign_id A comma-separated list of campaign IDs. (optional)
     * @param  string $period The period to query. (optional, default to last7)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function averageSessionTimeRequest($start, $end, $location_id = null, $campaign_id = null, $period = 'last7')
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling averageSessionTime'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling averageSessionTime'
            );
        }

        $resourcePath = '/average-session-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($location_id)) {
            $location_id = ObjectSerializer::serializeCollection($location_id, 'multi', true);
        }
        if ($location_id !== null) {
            $queryParams['location_id'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if (is_array($campaign_id)) {
            $campaign_id = ObjectSerializer::serializeCollection($campaign_id, 'multi', true);
        }
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = ObjectSerializer::toQueryValue($period);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSocialLogins
     *
     * Retrieve aggregated guest logins for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getSocialLogins($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        $this->getSocialLoginsWithHttpInfo($location_id, $start_date, $end_date, $agg);
    }

    /**
     * Operation getSocialLoginsWithHttpInfo
     *
     * Retrieve aggregated guest logins for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSocialLoginsWithHttpInfo($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        $returnType = '';
        $request = $this->getSocialLoginsRequest($location_id, $start_date, $end_date, $agg);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getSocialLoginsAsync
     *
     * Retrieve aggregated guest logins for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSocialLoginsAsync($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        return $this->getSocialLoginsAsyncWithHttpInfo($location_id, $start_date, $end_date, $agg)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSocialLoginsAsyncWithHttpInfo
     *
     * Retrieve aggregated guest logins for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSocialLoginsAsyncWithHttpInfo($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        $returnType = '';
        $request = $this->getSocialLoginsRequest($location_id, $start_date, $end_date, $agg);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSocialLogins'
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSocialLoginsRequest($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling getSocialLogins'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getSocialLogins'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getSocialLogins'
            );
        }

        $resourcePath = '/get-social-logins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($location_id)) {
            $location_id = ObjectSerializer::serializeCollection($location_id, 'multi', true);
        }
        if ($location_id !== null) {
            $queryParams['location_id'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($agg !== null) {
            $queryParams['AGG'] = ObjectSerializer::toQueryValue($agg);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVisits
     *
     * Retrieve aggregated visit data for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getVisits($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        $this->getVisitsWithHttpInfo($location_id, $start_date, $end_date, $agg);
    }

    /**
     * Operation getVisitsWithHttpInfo
     *
     * Retrieve aggregated visit data for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVisitsWithHttpInfo($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        $returnType = '';
        $request = $this->getVisitsRequest($location_id, $start_date, $end_date, $agg);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getVisitsAsync
     *
     * Retrieve aggregated visit data for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisitsAsync($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        return $this->getVisitsAsyncWithHttpInfo($location_id, $start_date, $end_date, $agg)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVisitsAsyncWithHttpInfo
     *
     * Retrieve aggregated visit data for a Location
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisitsAsyncWithHttpInfo($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        $returnType = '';
        $request = $this->getVisitsRequest($location_id, $start_date, $end_date, $agg);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVisits'
     *
     * @param  int[] $location_id A comma-separated list of location IDs. (required)
     * @param  \DateTime $start_date The start date format should be YYYY-MM-DD (required)
     * @param  \DateTime $end_date The end date format should be YYYY-MM-DD (required)
     * @param  string $agg The interval to group results by (optional, default to DAY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVisitsRequest($location_id, $start_date, $end_date, $agg = 'DAY')
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling getVisits'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getVisits'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getVisits'
            );
        }

        $resourcePath = '/get-visits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($location_id)) {
            $location_id = ObjectSerializer::serializeCollection($location_id, 'multi', true);
        }
        if ($location_id !== null) {
            $queryParams['location_id'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($agg !== null) {
            $queryParams['AGG'] = ObjectSerializer::toQueryValue($agg);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
