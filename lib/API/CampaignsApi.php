<?php
/**
 * CampaignsApi
 * PHP version 5
 *
 * @category Class
 * @package  GuestNetworks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Guest Networks API
 *
 * This is the public API for the [Guest Networks platform](https://www.mywifinetworks.com).  All requests must include an App Secret Key for authentication. To get your App Secret Key: 1. Log in to your MyWiFi Control Panel 1. Navigate to Branding section 1. Note your API key, located in the App Secret Key field
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GuestNetworks\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuestNetworks\ApiException;
use GuestNetworks\Configuration;
use GuestNetworks\HeaderSelector;
use GuestNetworks\ObjectSerializer;

/**
 * CampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  GuestNetworks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation campaignList
     *
     * Retrieve list of all Campaigns
     *
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function campaignList()
    {
        $this->campaignListWithHttpInfo();
    }

    /**
     * Operation campaignListWithHttpInfo
     *
     * Retrieve list of all Campaigns
     *
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function campaignListWithHttpInfo()
    {
        $returnType = '';
        $request = $this->campaignListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation campaignListAsync
     *
     * Retrieve list of all Campaigns
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function campaignListAsync()
    {
        return $this->campaignListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation campaignListAsyncWithHttpInfo
     *
     * Retrieve list of all Campaigns
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function campaignListAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->campaignListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'campaignList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function campaignListRequest()
    {

        $resourcePath = '/campaign-list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateCampaign
     *
     * Create or Update a Campaign
     *
     * @param  string $name name (optional)
     * @param  int $campaign_id campaign_id (optional)
     * @param  int $template_campaign_id template_campaign_id (optional)
     * @param  string $login_options login_options (optional)
     * @param  string $ssid ssid (optional)
     * @param  string $text_color text_color (optional)
     * @param  string $background background (optional)
     * @param  string $footer_text footer_text (optional)
     * @param  string $title_text title_text (optional)
     * @param  string $custom_terms custom_terms (optional)
     * @param  string $redirect_url redirect_url (optional)
     * @param  int $login_facebook login_facebook (optional)
     * @param  int $login_custom login_custom (optional)
     * @param  int $login_twitter login_twitter (optional)
     * @param  int $login_instagram login_instagram (optional)
     * @param  int $login_linkedin login_linkedin (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createOrUpdateCampaign($name = null, $campaign_id = null, $template_campaign_id = null, $login_options = null, $ssid = null, $text_color = null, $background = null, $footer_text = null, $title_text = null, $custom_terms = null, $redirect_url = null, $login_facebook = null, $login_custom = null, $login_twitter = null, $login_instagram = null, $login_linkedin = null)
    {
        $this->createOrUpdateCampaignWithHttpInfo($name, $campaign_id, $template_campaign_id, $login_options, $ssid, $text_color, $background, $footer_text, $title_text, $custom_terms, $redirect_url, $login_facebook, $login_custom, $login_twitter, $login_instagram, $login_linkedin);
    }

    /**
     * Operation createOrUpdateCampaignWithHttpInfo
     *
     * Create or Update a Campaign
     *
     * @param  string $name (optional)
     * @param  int $campaign_id (optional)
     * @param  int $template_campaign_id (optional)
     * @param  string $login_options (optional)
     * @param  string $ssid (optional)
     * @param  string $text_color (optional)
     * @param  string $background (optional)
     * @param  string $footer_text (optional)
     * @param  string $title_text (optional)
     * @param  string $custom_terms (optional)
     * @param  string $redirect_url (optional)
     * @param  int $login_facebook (optional)
     * @param  int $login_custom (optional)
     * @param  int $login_twitter (optional)
     * @param  int $login_instagram (optional)
     * @param  int $login_linkedin (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateCampaignWithHttpInfo($name = null, $campaign_id = null, $template_campaign_id = null, $login_options = null, $ssid = null, $text_color = null, $background = null, $footer_text = null, $title_text = null, $custom_terms = null, $redirect_url = null, $login_facebook = null, $login_custom = null, $login_twitter = null, $login_instagram = null, $login_linkedin = null)
    {
        $returnType = '';
        $request = $this->createOrUpdateCampaignRequest($name, $campaign_id, $template_campaign_id, $login_options, $ssid, $text_color, $background, $footer_text, $title_text, $custom_terms, $redirect_url, $login_facebook, $login_custom, $login_twitter, $login_instagram, $login_linkedin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateCampaignAsync
     *
     * Create or Update a Campaign
     *
     * @param  string $name (optional)
     * @param  int $campaign_id (optional)
     * @param  int $template_campaign_id (optional)
     * @param  string $login_options (optional)
     * @param  string $ssid (optional)
     * @param  string $text_color (optional)
     * @param  string $background (optional)
     * @param  string $footer_text (optional)
     * @param  string $title_text (optional)
     * @param  string $custom_terms (optional)
     * @param  string $redirect_url (optional)
     * @param  int $login_facebook (optional)
     * @param  int $login_custom (optional)
     * @param  int $login_twitter (optional)
     * @param  int $login_instagram (optional)
     * @param  int $login_linkedin (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCampaignAsync($name = null, $campaign_id = null, $template_campaign_id = null, $login_options = null, $ssid = null, $text_color = null, $background = null, $footer_text = null, $title_text = null, $custom_terms = null, $redirect_url = null, $login_facebook = null, $login_custom = null, $login_twitter = null, $login_instagram = null, $login_linkedin = null)
    {
        return $this->createOrUpdateCampaignAsyncWithHttpInfo($name, $campaign_id, $template_campaign_id, $login_options, $ssid, $text_color, $background, $footer_text, $title_text, $custom_terms, $redirect_url, $login_facebook, $login_custom, $login_twitter, $login_instagram, $login_linkedin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateCampaignAsyncWithHttpInfo
     *
     * Create or Update a Campaign
     *
     * @param  string $name (optional)
     * @param  int $campaign_id (optional)
     * @param  int $template_campaign_id (optional)
     * @param  string $login_options (optional)
     * @param  string $ssid (optional)
     * @param  string $text_color (optional)
     * @param  string $background (optional)
     * @param  string $footer_text (optional)
     * @param  string $title_text (optional)
     * @param  string $custom_terms (optional)
     * @param  string $redirect_url (optional)
     * @param  int $login_facebook (optional)
     * @param  int $login_custom (optional)
     * @param  int $login_twitter (optional)
     * @param  int $login_instagram (optional)
     * @param  int $login_linkedin (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCampaignAsyncWithHttpInfo($name = null, $campaign_id = null, $template_campaign_id = null, $login_options = null, $ssid = null, $text_color = null, $background = null, $footer_text = null, $title_text = null, $custom_terms = null, $redirect_url = null, $login_facebook = null, $login_custom = null, $login_twitter = null, $login_instagram = null, $login_linkedin = null)
    {
        $returnType = '';
        $request = $this->createOrUpdateCampaignRequest($name, $campaign_id, $template_campaign_id, $login_options, $ssid, $text_color, $background, $footer_text, $title_text, $custom_terms, $redirect_url, $login_facebook, $login_custom, $login_twitter, $login_instagram, $login_linkedin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateCampaign'
     *
     * @param  string $name (optional)
     * @param  int $campaign_id (optional)
     * @param  int $template_campaign_id (optional)
     * @param  string $login_options (optional)
     * @param  string $ssid (optional)
     * @param  string $text_color (optional)
     * @param  string $background (optional)
     * @param  string $footer_text (optional)
     * @param  string $title_text (optional)
     * @param  string $custom_terms (optional)
     * @param  string $redirect_url (optional)
     * @param  int $login_facebook (optional)
     * @param  int $login_custom (optional)
     * @param  int $login_twitter (optional)
     * @param  int $login_instagram (optional)
     * @param  int $login_linkedin (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateCampaignRequest($name = null, $campaign_id = null, $template_campaign_id = null, $login_options = null, $ssid = null, $text_color = null, $background = null, $footer_text = null, $title_text = null, $custom_terms = null, $redirect_url = null, $login_facebook = null, $login_custom = null, $login_twitter = null, $login_instagram = null, $login_linkedin = null)
    {

        $resourcePath = '/create-or-update-campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($campaign_id !== null) {
            $formParams['campaign_id'] = ObjectSerializer::toFormValue($campaign_id);
        }
        // form params
        if ($template_campaign_id !== null) {
            $formParams['template_campaign_id'] = ObjectSerializer::toFormValue($template_campaign_id);
        }
        // form params
        if ($login_options !== null) {
            $formParams['login_options'] = ObjectSerializer::toFormValue($login_options);
        }
        // form params
        if ($ssid !== null) {
            $formParams['ssid'] = ObjectSerializer::toFormValue($ssid);
        }
        // form params
        if ($text_color !== null) {
            $formParams['text_color'] = ObjectSerializer::toFormValue($text_color);
        }
        // form params
        if ($background !== null) {
            $formParams['background'] = ObjectSerializer::toFormValue($background);
        }
        // form params
        if ($footer_text !== null) {
            $formParams['footer_text'] = ObjectSerializer::toFormValue($footer_text);
        }
        // form params
        if ($title_text !== null) {
            $formParams['title_text'] = ObjectSerializer::toFormValue($title_text);
        }
        // form params
        if ($custom_terms !== null) {
            $formParams['custom_terms'] = ObjectSerializer::toFormValue($custom_terms);
        }
        // form params
        if ($redirect_url !== null) {
            $formParams['redirect_url'] = ObjectSerializer::toFormValue($redirect_url);
        }
        // form params
        if ($login_facebook !== null) {
            $formParams['login_facebook'] = ObjectSerializer::toFormValue($login_facebook);
        }
        // form params
        if ($login_custom !== null) {
            $formParams['login_custom'] = ObjectSerializer::toFormValue($login_custom);
        }
        // form params
        if ($login_twitter !== null) {
            $formParams['login_twitter'] = ObjectSerializer::toFormValue($login_twitter);
        }
        // form params
        if ($login_instagram !== null) {
            $formParams['login_instagram'] = ObjectSerializer::toFormValue($login_instagram);
        }
        // form params
        if ($login_linkedin !== null) {
            $formParams['login_linkedin'] = ObjectSerializer::toFormValue($login_linkedin);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateCampaign
     *
     * Create or Update a Campaign
     *
     * @param  \GuestNetworks\Model\Campaign $body body (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createOrUpdateCampaign($body = null)
    {
        $this->createOrUpdateCampaignWithHttpInfo($body);
    }

    /**
     * Operation createOrUpdateCampaignWithHttpInfo
     *
     * Create or Update a Campaign
     *
     * @param  \GuestNetworks\Model\Campaign $body (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateCampaignWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createOrUpdateCampaignRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateCampaignAsync
     *
     * Create or Update a Campaign
     *
     * @param  \GuestNetworks\Model\Campaign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCampaignAsync($body = null)
    {
        return $this->createOrUpdateCampaignAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateCampaignAsyncWithHttpInfo
     *
     * Create or Update a Campaign
     *
     * @param  \GuestNetworks\Model\Campaign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateCampaignAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createOrUpdateCampaignRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateCampaign'
     *
     * @param  \GuestNetworks\Model\Campaign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateCampaignRequest($body = null)
    {

        $resourcePath = '/create-or-update-campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($campaign_id !== null) {
            $formParams['campaign_id'] = ObjectSerializer::toFormValue($campaign_id);
        }
        // form params
        if ($template_campaign_id !== null) {
            $formParams['template_campaign_id'] = ObjectSerializer::toFormValue($template_campaign_id);
        }
        // form params
        if ($login_options !== null) {
            $formParams['login_options'] = ObjectSerializer::toFormValue($login_options);
        }
        // form params
        if ($ssid !== null) {
            $formParams['ssid'] = ObjectSerializer::toFormValue($ssid);
        }
        // form params
        if ($text_color !== null) {
            $formParams['text_color'] = ObjectSerializer::toFormValue($text_color);
        }
        // form params
        if ($background !== null) {
            $formParams['background'] = ObjectSerializer::toFormValue($background);
        }
        // form params
        if ($footer_text !== null) {
            $formParams['footer_text'] = ObjectSerializer::toFormValue($footer_text);
        }
        // form params
        if ($title_text !== null) {
            $formParams['title_text'] = ObjectSerializer::toFormValue($title_text);
        }
        // form params
        if ($custom_terms !== null) {
            $formParams['custom_terms'] = ObjectSerializer::toFormValue($custom_terms);
        }
        // form params
        if ($redirect_url !== null) {
            $formParams['redirect_url'] = ObjectSerializer::toFormValue($redirect_url);
        }
        // form params
        if ($login_facebook !== null) {
            $formParams['login_facebook'] = ObjectSerializer::toFormValue($login_facebook);
        }
        // form params
        if ($login_custom !== null) {
            $formParams['login_custom'] = ObjectSerializer::toFormValue($login_custom);
        }
        // form params
        if ($login_twitter !== null) {
            $formParams['login_twitter'] = ObjectSerializer::toFormValue($login_twitter);
        }
        // form params
        if ($login_instagram !== null) {
            $formParams['login_instagram'] = ObjectSerializer::toFormValue($login_instagram);
        }
        // form params
        if ($login_linkedin !== null) {
            $formParams['login_linkedin'] = ObjectSerializer::toFormValue($login_linkedin);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaign
     *
     * Delete a Campaign
     *
     * @param  int $campaign_id campaign_id (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCampaign($campaign_id = null)
    {
        $this->deleteCampaignWithHttpInfo($campaign_id);
    }

    /**
     * Operation deleteCampaignWithHttpInfo
     *
     * Delete a Campaign
     *
     * @param  int $campaign_id (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignWithHttpInfo($campaign_id = null)
    {
        $returnType = '';
        $request = $this->deleteCampaignRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignAsync
     *
     * Delete a Campaign
     *
     * @param  int $campaign_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsync($campaign_id = null)
    {
        return $this->deleteCampaignAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignAsyncWithHttpInfo
     *
     * Delete a Campaign
     *
     * @param  int $campaign_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsyncWithHttpInfo($campaign_id = null)
    {
        $returnType = '';
        $request = $this->deleteCampaignRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaign'
     *
     * @param  int $campaign_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCampaignRequest($campaign_id = null)
    {

        $resourcePath = '/delete-campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($campaign_id !== null) {
            $formParams['campaign_id'] = ObjectSerializer::toFormValue($campaign_id);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaign
     *
     * Delete a Campaign
     *
     * @param  \GuestNetworks\Model\DeleteCampaign $body body (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCampaign($body = null)
    {
        $this->deleteCampaignWithHttpInfo($body);
    }

    /**
     * Operation deleteCampaignWithHttpInfo
     *
     * Delete a Campaign
     *
     * @param  \GuestNetworks\Model\DeleteCampaign $body (optional)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->deleteCampaignRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignAsync
     *
     * Delete a Campaign
     *
     * @param  \GuestNetworks\Model\DeleteCampaign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsync($body = null)
    {
        return $this->deleteCampaignAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignAsyncWithHttpInfo
     *
     * Delete a Campaign
     *
     * @param  \GuestNetworks\Model\DeleteCampaign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->deleteCampaignRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaign'
     *
     * @param  \GuestNetworks\Model\DeleteCampaign $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCampaignRequest($body = null)
    {

        $resourcePath = '/delete-campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($campaign_id !== null) {
            $formParams['campaign_id'] = ObjectSerializer::toFormValue($campaign_id);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaign
     *
     * Retrieve data for multiple or single Campaign(s)
     *
     * @param  int[] $campaign_ids A comma-separated list of campaign IDs. (required)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCampaign($campaign_ids)
    {
        $this->getCampaignWithHttpInfo($campaign_ids);
    }

    /**
     * Operation getCampaignWithHttpInfo
     *
     * Retrieve data for multiple or single Campaign(s)
     *
     * @param  int[] $campaign_ids A comma-separated list of campaign IDs. (required)
     *
     * @throws \GuestNetworks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignWithHttpInfo($campaign_ids)
    {
        $returnType = '';
        $request = $this->getCampaignRequest($campaign_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignAsync
     *
     * Retrieve data for multiple or single Campaign(s)
     *
     * @param  int[] $campaign_ids A comma-separated list of campaign IDs. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsync($campaign_ids)
    {
        return $this->getCampaignAsyncWithHttpInfo($campaign_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignAsyncWithHttpInfo
     *
     * Retrieve data for multiple or single Campaign(s)
     *
     * @param  int[] $campaign_ids A comma-separated list of campaign IDs. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsyncWithHttpInfo($campaign_ids)
    {
        $returnType = '';
        $request = $this->getCampaignRequest($campaign_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaign'
     *
     * @param  int[] $campaign_ids A comma-separated list of campaign IDs. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCampaignRequest($campaign_ids)
    {
        // verify the required parameter 'campaign_ids' is set
        if ($campaign_ids === null || (is_array($campaign_ids) && count($campaign_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_ids when calling getCampaign'
            );
        }

        $resourcePath = '/get-campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($campaign_ids)) {
            $campaign_ids = ObjectSerializer::serializeCollection($campaign_ids, 'multi', true);
        }
        if ($campaign_ids !== null) {
            $queryParams['campaign_ids'] = ObjectSerializer::toQueryValue($campaign_ids);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('identifier');
        if ($apiKey !== null) {
            $headers['identifier'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
