<?php
/**
 * LocationOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  GuestNetworks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Guest Networks API
 *
 * This is the public API for the [Guest Networks platform](https://www.mywifinetworks.com).  All requests must include an App Secret Key for authentication. To get your App Secret Key: 1. Log in to your MyWiFi Control Panel 1. Navigate to Branding section 1. Note your API key, located in the App Secret Key field
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GuestNetworks\Model;

use \ArrayAccess;
use \GuestNetworks\ObjectSerializer;

/**
 * LocationOption Class Doc Comment
 *
 * @category Class
 * @package  GuestNetworks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LocationOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'location_id' => 'int',
'session_time_limit' => 'int',
'max_bandwidth' => 'int',
'max_bandwidth_up' => 'int',
'daily_bandwidth_cap' => 'int',
'content_filter' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'location_id' => null,
'session_time_limit' => null,
'max_bandwidth' => null,
'max_bandwidth_up' => null,
'daily_bandwidth_cap' => null,
'content_filter' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_id' => 'location_id',
'session_time_limit' => 'session_time_limit',
'max_bandwidth' => 'max_bandwidth',
'max_bandwidth_up' => 'max_bandwidth_up',
'daily_bandwidth_cap' => 'daily_bandwidth_cap',
'content_filter' => 'content_filter'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_id' => 'setLocationId',
'session_time_limit' => 'setSessionTimeLimit',
'max_bandwidth' => 'setMaxBandwidth',
'max_bandwidth_up' => 'setMaxBandwidthUp',
'daily_bandwidth_cap' => 'setDailyBandwidthCap',
'content_filter' => 'setContentFilter'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_id' => 'getLocationId',
'session_time_limit' => 'getSessionTimeLimit',
'max_bandwidth' => 'getMaxBandwidth',
'max_bandwidth_up' => 'getMaxBandwidthUp',
'daily_bandwidth_cap' => 'getDailyBandwidthCap',
'content_filter' => 'getContentFilter'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['session_time_limit'] = isset($data['session_time_limit']) ? $data['session_time_limit'] : null;
        $this->container['max_bandwidth'] = isset($data['max_bandwidth']) ? $data['max_bandwidth'] : null;
        $this->container['max_bandwidth_up'] = isset($data['max_bandwidth_up']) ? $data['max_bandwidth_up'] : null;
        $this->container['daily_bandwidth_cap'] = isset($data['daily_bandwidth_cap']) ? $data['daily_bandwidth_cap'] : null;
        $this->container['content_filter'] = isset($data['content_filter']) ? $data['content_filter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id If updating a Location, set this to the Location ID, or leave empty to create a new Location
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets session_time_limit
     *
     * @return int
     */
    public function getSessionTimeLimit()
    {
        return $this->container['session_time_limit'];
    }

    /**
     * Sets session_time_limit
     *
     * @param int $session_time_limit Allowed session time in seconds
     *
     * @return $this
     */
    public function setSessionTimeLimit($session_time_limit)
    {
        $this->container['session_time_limit'] = $session_time_limit;

        return $this;
    }

    /**
     * Gets max_bandwidth
     *
     * @return int
     */
    public function getMaxBandwidth()
    {
        return $this->container['max_bandwidth'];
    }

    /**
     * Sets max_bandwidth
     *
     * @param int $max_bandwidth Maximum allowed bandwidth used in bytes
     *
     * @return $this
     */
    public function setMaxBandwidth($max_bandwidth)
    {
        $this->container['max_bandwidth'] = $max_bandwidth;

        return $this;
    }

    /**
     * Gets max_bandwidth_up
     *
     * @return int
     */
    public function getMaxBandwidthUp()
    {
        return $this->container['max_bandwidth_up'];
    }

    /**
     * Sets max_bandwidth_up
     *
     * @param int $max_bandwidth_up Maximum allowed upload bandwidth used in bytes
     *
     * @return $this
     */
    public function setMaxBandwidthUp($max_bandwidth_up)
    {
        $this->container['max_bandwidth_up'] = $max_bandwidth_up;

        return $this;
    }

    /**
     * Gets daily_bandwidth_cap
     *
     * @return int
     */
    public function getDailyBandwidthCap()
    {
        return $this->container['daily_bandwidth_cap'];
    }

    /**
     * Sets daily_bandwidth_cap
     *
     * @param int $daily_bandwidth_cap Daily allowed bandwidth in bytes
     *
     * @return $this
     */
    public function setDailyBandwidthCap($daily_bandwidth_cap)
    {
        $this->container['daily_bandwidth_cap'] = $daily_bandwidth_cap;

        return $this;
    }

    /**
     * Gets content_filter
     *
     * @return int
     */
    public function getContentFilter()
    {
        return $this->container['content_filter'];
    }

    /**
     * Sets content_filter
     *
     * @param int $content_filter The content_filter must be [1 / 0] - false if you want to disable the content filter
     *
     * @return $this
     */
    public function setContentFilter($content_filter)
    {
        $this->container['content_filter'] = $content_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
